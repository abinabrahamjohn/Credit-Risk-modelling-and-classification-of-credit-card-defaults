%Clear workspace, command window and close figures
clear all;
clc;
close all;

%Dataloading- Need to make it independent of location
credit_default_data=readtable('default_of_credit_card_clients.xls','Range','B2:Y30002');
head(credit_default_data,5)

%Categorical data conversion
% Data Pre-processing : Transforming categorical variables into the categorical type
catColumns = {'EDUCATION', 'SEX', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'defaultPaymentNextMonth'};
catColumnsFilter = ismember(credit_default_data.Properties.VariableNames, catColumns); % boolean mask for categorical attributes
for i = 1:length(catColumns)
    col = catColumns{i};
    credit_default_data.(col) = categorical(credit_default_data{:, col});
end

%exploratory data analysis
labels = {'0','1'};
figure(1)
pie(credit_default_data.defaultPaymentNextMonth)
title('Target Class Imbalance')

fprintf('**Exploratory Data Analysis on Credit card Default**\n')
%dimensions of data
[m n] = size(credit_default_data);
fprintf('The dataset has %d Rows and %d Columns.\n', m, n)
fprintf('The dataset has %d Numeric and %d Categorical attributes.\n',...
    n-length(catColumns), length(catColumns))

%histogram
% Univariate Analysis : Histograms of Features
figure('pos',[10 10 1000 600])
title('Histogram of features')
for col_index = 1:n-1
    %figure(col_index)
    subplot(5,5,col_index)
   histogram(credit_default_data{:, col_index})
   title(sprintf('Histogram of %s', credit_default_data.Properties.VariableNames{col_index}))
end

%correlation
 % Compute Correlation Matrix (Pearson coefficient)
figure(3)
corrMatrix = corr(table2array(credit_default_data(:, ~catColumnsFilter)),'type','Pearson');
    % Plot the Correlation Matrix
xvalues = {'LIMIT_BAL','AGE','BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT15','BILL_AMT6','PAY_AMT1','PAY_AMT2','PAY_AMT3','PAY_AMT4','PAY_AMT5','PAY_AMT6'};
yvalues = {'LIMIT_BAL','AGE','BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT15','BILL_AMT6','PAY_AMT1','PAY_AMT2','PAY_AMT3','PAY_AMT4','PAY_AMT5','PAY_AMT6'};
title('Correlation Chart')
heatmap(xvalues,yvalues,corrMatrix)
title('Correlation Plot (Pearson) - Numeric Attributes')


%visualization

%data cleaning
credit_default_data.EDUCATION(strcmpi(credit_default_data.EDUCATION,'5')) = {'4'};
credit_default_data.EDUCATION(strcmpi(credit_default_data.EDUCATION,'6')) = {'4'};
credit_default_data.EDUCATION(strcmpi(credit_default_data.EDUCATION,'0')) = {'4'};
credit_default_data.MARRIAGE(strcmpi(credit_default_data.MARRIAGE,'0')) = {'3'};
%remove correlated columns

%feature engineering

%feature scaling and normalization

%Splitting data  into training and test data
%Should be randomly picked
%train: 80%, test: 20%
cv = cvpartition(size(credit_default_data,1),'HoldOut',0.2);
idx = cv.test;
% Separate to training and test data
train_credit_default_data = credit_default_data(~idx,:);
test_credit_default_data  = credit_default_data(idx,:);


%Data split into features and labels
train_credit_default_labels=train_credit_default_data(:,24);
train_credit_default_features=train_credit_default_data(:,1:23);

test_credit_default_labels=test_credit_default_data(:,24);
test_credit_default_features=test_credit_default_data(:,1:23);

%Modeling different classifiers

%using random forest
%Need to justify selected number
treeRandomForest = TreeBagger(100,train_credit_default_features,train_credit_default_labels,'Prior',[0.78 0.22]);
treeRandomForestResult=predict(treeRandomForest,test_credit_default_features);
[predRF, PosteriorRF]=predict(treeRandomForest,test_credit_default_features);
%confusion matrix for random forest classifier
figure(4)
confusionchart(test_credit_default_labels.defaultPaymentNextMonth,categorical(treeRandomForestResult))
confusion_matrix_RF=confusionmat(test_credit_default_labels.defaultPaymentNextMonth,categorical(treeRandomForestResult));
[accuracyRF,precisionRF, recallRF, specificityRF,fscoreRF] = PerformanceMetrics(confusion_matrix_RF);
fprintf('Performance Metrics for Random Forest\n')
fprintf('Accuracy RF : %f\n',accuracyRF)
fprintf('Precision RF : %f\n',precisionRF)
fprintf('Recall RF : %f\n',recallRF)
fprintf('Specificity RF : %f\n',specificityRF)
fprintf('F1 score RF : %f\n',fscoreRF)

title('Confusion Matrix for Random Forest Classifier')

%using naive bayesian classifier
%naiveBayes = fitcnb(train_credit_default_features,train_credit_default_labels);
naiveBayes = fitcnb(train_credit_default_features,train_credit_default_labels,'ClassNames',{'0'  '1'},'Prior',[0.78 0.22]);
naiveBayesResult=predict(naiveBayes,test_credit_default_features);
[predNB, PosteriorNB]=predict(naiveBayes,test_credit_default_features);
%confusion matrix for naive bayesian classifier
figure(5)
confusionchart(test_credit_default_labels.defaultPaymentNextMonth,categorical(naiveBayesResult))
confusion_matrix_NB=confusionmat(test_credit_default_labels.defaultPaymentNextMonth,categorical(naiveBayesResult));
[accuracyNB,precisionNB, recallNB, specificityNB,fscoreNB] = PerformanceMetrics(confusion_matrix_NB);
fprintf('Performance Metrics for Naive Bayes\n')
fprintf('Accuracy NB : %f\n',accuracyNB)
fprintf('Precision NB : %f\n',precisionNB)
fprintf('Recall NB : %f\n',recallNB)
fprintf('Specifcity NB : %f\n',specificityNB)
fprintf('F1 score NB : %f\n',fscoreNB)
title('Confusion Matrix for Naive Bayesian Classifier')

%measure performance
% ROC curve
[XNB, YNB, TNB, AUCNB] = perfcurve(test_credit_default_labels.defaultPaymentNextMonth, PosteriorNB(:, 1), '1');
[XRF, YRF, TR, AUCRF] = perfcurve(test_credit_default_labels.defaultPaymentNextMonth, PosteriorRF(:, 1), '1');
figure(6)
plot(XNB, YNB)
hold on
plot(XRF, YRF)
hold on
title('ROC Curve Comparison : Naive Bayes vs Random Forest')
xlabel('False Positive Rate'); ylabel('True Positive Rate');
legend('Naive Bayes', 'Random Forest')

%Performance Metrics

%hold on
